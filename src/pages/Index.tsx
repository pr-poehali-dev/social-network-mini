import { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

import Header from '@/components/Header';
import ProfileTab from '@/components/ProfileTab';
import FeedTab from '@/components/FeedTab';
import MessagesTab from '@/components/MessagesTab';
import FollowersTab from '@/components/FollowersTab';
import CommunitiesTab from '@/components/CommunitiesTab';
import SettingsTab from '@/components/SettingsTab';

interface Post {
  id: number;
  author: string;
  avatar: string;
  time: string;
  content: string;
  likes: number;
  comments: number;
  shares: number;
  liked?: boolean;
}

interface Chat {
  id: number;
  name: string;
  lastMessage: string;
  time: string;
  unread: number;
  messages: Message[];
}

interface Message {
  id: number;
  author: string;
  content: string;
  time: string;
  isOwn: boolean;
}

interface User {
  id: number;
  name: string;
  avatar: string;
  mutual?: string;
  status?: 'online' | 'offline';
}

interface Community {
  id: number;
  name: string;
  members: string;
  image: string;
  joined: boolean;
}

const Index = () => {
  const [activeTab, setActiveTab] = useState('feed');
  const [selectedChat, setSelectedChat] = useState<number | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [posts, setPosts] = useState<Post[]>([]);
  const [chats, setChats] = useState<Chat[]>([]);
  const [followers, setFollowers] = useState<User[]>([]);
  const [newPost, setNewPost] = useState('');
  const [profile, setProfile] = useState({
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤',
    bio: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–æ—Å–º–æ—Å–∞ üöÄ',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    website: 'github.com/cosmonaut',
    postsCount: 234,
    followersCount: 1247,
    likesCount: 890
  });

  const communities: Community[] = [
    { id: 1, name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏', members: '12.5K', image: 'üöÄ', joined: false },
    { id: 2, name: 'UI/UX –ì–∞–ª–∞–∫—Ç–∏–∫–∞', members: '8.2K', image: 'üé®', joined: false },
    { id: 3, name: '–°—Ç–∞—Ä—Ç–∞–ø –û—Ä–±–∏—Ç–∞', members: '15.1K', image: 'üí´', joined: true },
    { id: 4, name: '–§–æ—Ç–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π', members: '20.3K', image: 'üì∏', joined: false }
  ];

  useEffect(() => {
    const savedPosts = localStorage.getItem('socialPosts');
    const savedChats = localStorage.getItem('socialChats');
    const savedFollowers = localStorage.getItem('socialFollowers');
    const savedProfile = localStorage.getItem('socialProfile');

    if (savedPosts) {
      setPosts(JSON.parse(savedPosts));
    } else {
      const initialPosts: Post[] = [
        {
          id: 1,
          author: '–ú–∞—Ä–∏—è –ó–≤—ë–∑–¥–Ω–∞—è',
          avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b1e7?w=32&h=32&fit=crop&crop=face',
          time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
          content: '–¢–æ–ª—å–∫–æ —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º—É –ø–æ–ª—ë—Ç—É! –ù–µ–≤–µ—Å–æ–º–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ ‚ú®üöÄ',
          likes: 42,
          comments: 12,
          shares: 5,
          liked: false
        },
        {
          id: 2,
          author: '–î–º–∏—Ç—Ä–∏–π –ì–∞–ª–∞–∫—Ç–∏–∫',
          avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face',
          time: '4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
          content: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –ú–ö–°. –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –æ—Å–Ω–æ–≤–∞ —É—Å–ø–µ—Ö–∞! üõ∞Ô∏è',
          likes: 89,
          comments: 23,
          shares: 15,
          liked: false
        }
      ];
      setPosts(initialPosts);
      localStorage.setItem('socialPosts', JSON.stringify(initialPosts));
    }

    if (savedChats) {
      setChats(JSON.parse(savedChats));
    } else {
      const initialChats: Chat[] = [
        {
          id: 1,
          name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞',
          lastMessage: '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–ø—É—Å–∫—É!',
          time: '15:30',
          unread: 3,
          messages: [
            { id: 1, author: '–ê–Ω–Ω–∞', content: '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ', time: '15:25', isOwn: false },
            { id: 2, author: '–í—ã', content: '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ —Å—Ç–∞—Ä—Ç—É', time: '15:28', isOwn: true },
            { id: 3, author: '–ú–∏—Ö–∞–∏–ª', content: '–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–ø—É—Å–∫—É!', time: '15:30', isOwn: false }
          ]
        },
        {
          id: 2,
          name: '–ï–ª–µ–Ω–∞ –û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è',
          lastMessage: '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞?',
          time: '14:45',
          unread: 1,
          messages: [
            { id: 1, author: '–ï–ª–µ–Ω–∞', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', time: '14:40', isOwn: false },
            { id: 2, author: '–ï–ª–µ–Ω–∞', content: '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞?', time: '14:45', isOwn: false }
          ]
        }
      ];
      setChats(initialChats);
      localStorage.setItem('socialChats', JSON.stringify(initialChats));
    }

    if (savedFollowers) {
      setFollowers(JSON.parse(savedFollowers));
    } else {
      const initialFollowers: User[] = [
        { id: 1, name: '–ê–Ω–Ω–∞ –ó–≤—ë–∑–¥–æ—á–∫–∞', mutual: '15 –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π', avatar: 'üë©‚ÄçüöÄ', status: 'online' },
        { id: 2, name: '–ú–∞–∫—Å–∏–º –ö–æ—Å–º–æ—Å', mutual: '8 –æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π', avatar: 'üë®‚ÄçüöÄ', status: 'offline' },
        { id: 3, name: '–°–æ—Ñ–∏—è –ü–ª–∞–Ω–µ—Ç–∞', mutual: '23 –æ–±—â–∏—Ö –¥—Ä—É–≥–∞', avatar: 'üë©‚Äçüî¨', status: 'online' }
      ];
      setFollowers(initialFollowers);
      localStorage.setItem('socialFollowers', JSON.stringify(initialFollowers));
    }

    if (savedProfile) {
      setProfile(JSON.parse(savedProfile));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('socialPosts', JSON.stringify(posts));
  }, [posts]);

  useEffect(() => {
    localStorage.setItem('socialChats', JSON.stringify(chats));
  }, [chats]);

  useEffect(() => {
    localStorage.setItem('socialFollowers', JSON.stringify(followers));
  }, [followers]);

  useEffect(() => {
    localStorage.setItem('socialProfile', JSON.stringify(profile));
  }, [profile]);

  const addPost = () => {
    if (newPost.trim()) {
      const post: Post = {
        id: Date.now(),
        author: profile.name,
        avatar: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=32&h=32&fit=crop&crop=face',
        time: '—Ç–æ–ª—å–∫–æ —á—Ç–æ',
        content: newPost,
        likes: 0,
        comments: 0,
        shares: 0,
        liked: false
      };
      setPosts([post, ...posts]);
      setNewPost('');
      setProfile(prev => ({ ...prev, postsCount: prev.postsCount + 1 }));
    }
  };

  const toggleLike = (postId: number) => {
    setPosts(posts.map(post => 
      post.id === postId 
        ? { 
            ...post, 
            likes: post.liked ? post.likes - 1 : post.likes + 1,
            liked: !post.liked 
          }
        : post
    ));
  };

  const sendMessage = () => {
    if (newMessage.trim() && selectedChat !== null) {
      const message: Message = {
        id: Date.now(),
        author: '–í—ã',
        content: newMessage,
        time: new Date().toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' }),
        isOwn: true
      };

      setChats(chats.map(chat => 
        chat.id === selectedChat 
          ? { 
              ...chat, 
              messages: [...chat.messages, message],
              lastMessage: newMessage,
              time: message.time
            }
          : chat
      ));
      setNewMessage('');
    }
  };

  const addFriend = (userId: number) => {
    setFollowers(followers.map(follower => 
      follower.id === userId 
        ? { ...follower, mutual: '‚úì –î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω' }
        : follower
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-social-gray-50 to-social-gray-100">
      <Header profile={profile} />

      <div className="max-w-6xl mx-auto px-4 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-6 w-full max-w-3xl mx-auto mb-8 bg-white/50 backdrop-blur-sm p-1 rounded-2xl shadow-lg">
            <TabsTrigger value="profile" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="User" size={16} />
              <span className="hidden sm:inline">–ü—Ä–æ—Ñ–∏–ª—å</span>
            </TabsTrigger>
            <TabsTrigger value="feed" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="Home" size={16} />
              <span className="hidden sm:inline">–õ–µ–Ω—Ç–∞</span>
            </TabsTrigger>
            <TabsTrigger value="messages" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="MessageSquare" size={16} />
              <span className="hidden sm:inline">–ß–∞—Ç—ã</span>
            </TabsTrigger>
            <TabsTrigger value="followers" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="Users" size={16} />
              <span className="hidden sm:inline">–î—Ä—É–∑—å—è</span>
            </TabsTrigger>
            <TabsTrigger value="communities" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="Users2" size={16} />
              <span className="hidden sm:inline">–ì—Ä—É–ø–ø—ã</span>
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center space-x-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-social-primary data-[state=active]:to-social-secondary data-[state=active]:text-white">
              <Icon name="Settings" size={16} />
              <span className="hidden sm:inline">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="profile" className="animate-fade-in">
            <ProfileTab profile={profile} />
          </TabsContent>

          <TabsContent value="feed" className="animate-fade-in">
            <FeedTab 
              posts={posts}
              newPost={newPost}
              setNewPost={setNewPost}
              addPost={addPost}
              toggleLike={toggleLike}
              profile={profile}
            />
          </TabsContent>

          <TabsContent value="messages" className="animate-fade-in">
            <MessagesTab 
              chats={chats}
              selectedChat={selectedChat}
              setSelectedChat={setSelectedChat}
              newMessage={newMessage}
              setNewMessage={setNewMessage}
              sendMessage={sendMessage}
            />
          </TabsContent>

          <TabsContent value="followers" className="animate-fade-in">
            <FollowersTab 
              followers={followers}
              addFriend={addFriend}
            />
          </TabsContent>

          <TabsContent value="communities" className="animate-fade-in">
            <CommunitiesTab communities={communities} />
          </TabsContent>

          <TabsContent value="settings" className="animate-fade-in">
            <SettingsTab 
              profile={profile}
              setProfile={setProfile}
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Index;